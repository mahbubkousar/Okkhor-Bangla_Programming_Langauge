# src/vm/ir_to_bytecode.py

class IRToBytecodeGenerator:
    def __init__(self):
        self.bytecode = []

    def generate(self, ir):
        """Converts IR to bytecode."""
        for statement in ir:
            self.dispatch(statement)

    def dispatch(self, statement):
        """Dispatch each IR statement to the appropriate bytecode instruction."""
        if statement["type"] == "assign":
            self.handle_assign(statement)
        elif statement["type"] == "add":
            self.handle_add(statement)
        elif statement["type"] == "sub":
            self.handle_sub(statement)
        else:
            raise ValueError(f"Unknown statement type: {statement['type']}")

    def handle_assign(self, statement):
        """Handle assignment statements."""
        self.bytecode.append(("PUSH", statement["value"]))
        self.bytecode.append(("STORE", statement["variable"]))

    def handle_add(self, statement):
        """Handle addition operations."""
        self.bytecode.append(("PUSH", statement["left_operand"]))
        self.bytecode.append(("PUSH", statement["right_operand"]))
        self.bytecode.append(("ADD",))

    def handle_sub(self, statement):
        """Handle subtraction operations."""
        self.bytecode.append(("PUSH", statement["left_operand"]))
        self.bytecode.append(("PUSH", statement["right_operand"]))
        self.bytecode.append(("SUB",))

    def get_bytecode(self):
        """Return the generated bytecode."""
        return self.bytecode


# Example IR to Bytecode Conversion
if __name__ == "__main__":
    ir_statements = [
        {"type": "assign", "variable": "x", "value": 10},
        {"type": "assign", "variable": "y", "value": 5},
        {"type": "add", "left_operand": "x", "right_operand": "y"},
        {"type": "assign", "variable": "z", "value": 0},  # Result of x + y will be stored in z
    ]

    ir_to_bytecode_gen = IRToBytecodeGenerator()
    ir_to_bytecode_gen.generate(ir_statements)

    print("Generated Bytecode:", ir_to_bytecode_gen.get_bytecode())
